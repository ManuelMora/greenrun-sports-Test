{
  "openapi": "3.0.2",
  "info": {
    "title": "Greenrun Sports API",
    "version": "1.0"
  },
  "servers": [],
  "paths": {
    "/auth": {
      "summary": "auth",
      "description": "Resources to manage auth",
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth.Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to auth user",
        "description": "auth user"
      }
    },
    "/users": {
      "summary": "Users",
      "description": "Resources to manage a users",
      "get": {
        "tags": ["Users"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get users",
        "description": "Get all list from users"
      },
      "post": {
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a user",
        "description": "create new user"
      }
    },
    "/users/{id}": {
      "summary": "Users",
      "description": "Resources to manage a users",
      "get": {
        "tags": ["Users"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.User.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get user by Id",
        "description": "Get info from user"
      },
      "put": {
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update user",
        "description": "update a user"
      },
      "delete": {
        "tags": ["Users"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete user",
        "description": "delete a user"
      }
    },
    "/countries": {
      "summary": "Countries",
      "description": "Resources to manage a countries",
      "get": {
        "tags": ["Countries"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get countries",
        "description": "Get all list from system countries"
      },
      "post": {
        "tags": ["Countries"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries.Country"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a country",
        "description": "create new system country"
      }
    },
    "/countries/{id}": {
      "summary": "Countries",
      "description": "Resources to manage a countries",
      "get": {
        "tags": ["Countries"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries.Country.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Country id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get country by Id",
        "description": "Get info from system country"
      },
      "put": {
        "tags": ["Countries"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries.Country"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Country id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update country",
        "description": "update a system country"
      },
      "delete": {
        "tags": ["Countries"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Country id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete country",
        "description": "delete a system country"
      }
    },
    "/cities": {
      "summary": "Cities",
      "description": "Resources to manage a Cities",
      "get": {
        "tags": ["Cities"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get Cities",
        "description": "Get all list from system Cities"
      },
      "post": {
        "tags": ["Cities"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cities.City"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a city",
        "description": "create new system city"
      }
    },
    "/cities/{id}": {
      "summary": "Cities",
      "description": "Resources to manage a countries",
      "get": {
        "tags": ["Cities"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities.City.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "City id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get City by Id",
        "description": "Get info from system City"
      },
      "put": {
        "tags": ["Cities"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cities.City"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "City id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update City",
        "description": "update a system City"
      },
      "delete": {
        "tags": ["Cities"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "City id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete City",
        "description": "delete a system City"
      }
    },
    "/modules": {
      "summary": "Modules",
      "description": "Resources to manage a modules",
      "get": {
        "tags": ["Modules"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modules.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get modules",
        "description": "Get all list from system modules"
      },
      "post": {
        "tags": ["Modules"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Modules.Module"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modules.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a module",
        "description": "create new system module"
      }
    },
    "/modules/{id}": {
      "summary": "Modules",
      "description": "Resources to manage a modules",
      "get": {
        "tags": ["Modules"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modules.Module.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Module id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get module by Id",
        "description": "Get info from system module"
      },
      "put": {
        "tags": ["Modules"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Modules.Module"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modules.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Module id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update module",
        "description": "update a system module"
      },
      "delete": {
        "tags": ["Modules"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modules.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Module id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete module",
        "description": "delete a system module"
      }
    },
    "/roles": {
      "summary": "Roles",
      "description": "Resources to manage a roles",
      "get": {
        "tags": ["Roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get roles",
        "description": "Get all list from system roles"
      },
      "post": {
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles.Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a role",
        "description": "create new system role"
      }
    },
    "/roles/{id}": {
      "summary": "Roles",
      "description": "Resources to manage a roles",
      "get": {
        "tags": ["Roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles.Role.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Role id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get role by Id",
        "description": "Get info from system role"
      },
      "put": {
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles.Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Role id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update role",
        "description": "update a system role"
      },
      "delete": {
        "tags": ["Roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Role id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete role",
        "description": "delete a system role"
      }
    },
    "/permissions": {
      "summary": "Role Permissions",
      "description": "Resources to manage a permissions from roles",
      "get": {
        "tags": ["Role Permissions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissions.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get permissions from all roles",
        "description": "Get all list from system role permissions"
      },
      "post": {
        "tags": ["Role Permissions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissions.RolePermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissions.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a permission from specific role",
        "description": "create new system permission from role"
      }
    },
    "/permissions/{role_id}": {
      "summary": "Roles",
      "description": "Resources to manage a role permissions",
      "get": {
        "tags": ["Role Permissions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermission.PermissionsRole.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "role_id",
            "description": "Role id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get permissions by role Id",
        "description": "Get permissions from system role"
      }
    },
    "/permissions/{id}": {
      "summary": "Roles",
      "description": "Resources to manage a role permissions",
      "delete": {
        "tags": ["Role Permissions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissions.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Role Permission id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete specifi permission from role",
        "description": "delete a permission from system role"
      }
    },
    "/sports": {
      "summary": "Sports",
      "description": "Resources to manage a sports",
      "get": {
        "tags": ["Sports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sports.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get sports",
        "description": "Get all list from system sports"
      },
      "post": {
        "tags": ["Sports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sports.Sport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sports.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a sport",
        "description": "create new system sport"
      }
    },
    "/sports/{id}": {
      "summary": "Sports",
      "description": "Resources to manage a sports",
      "get": {
        "tags": ["Sports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sports.Sport.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Sport id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get sport by Id",
        "description": "Get info from system sport"
      },
      "put": {
        "tags": ["Sports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sports.Sport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sports.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Sport id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update sport",
        "description": "update a system sport"
      },
      "delete": {
        "tags": ["Sports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sports.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Sport id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete sport",
        "description": "delete a system sport"
      }
    },
    "/transactions": {
      "summary": "Transactions",
      "description": "Resources to manage a transactions",
      "get": {
        "tags": ["Transactions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get transactions",
        "description": "Get all list from transactions"
      },
      "post": {
        "tags": ["Transactions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transactions.Transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a transaction",
        "description": "create new transaction"
      }
    },
    "/transactions/{id}": {
      "summary": "Transactions",
      "description": "Resources to manage a transactions",
      "get": {
        "tags": ["Transactions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.Transaction.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Transaction id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get transaction by Id",
        "description": "Get info from transaction"
      },
      "put": {
        "tags": ["Transactions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transactions.Transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Transaction id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update transaction",
        "description": "update a transaction"
      },
      "delete": {
        "tags": ["Transactions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Transaction id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete transaction",
        "description": "delete a transaction"
      }
    },
    "/transactions/user/{id}": {
      "summary": "Transactions",
      "description": "Resources to manage a transactions",
      "get": {
        "tags": ["Transactions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions.User.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get transactions by user",
        "description": "Get all list from transactions filter by user"
      }
    },
    "/bets": {
      "summary": "Bets",
      "description": "Resources to manage a bets",
      "get": {
        "tags": ["Bets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bets.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get bets",
        "description": "Get all list from bets"
      },
      "post": {
        "tags": ["Bets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bets.Bet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bets.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a bet",
        "description": "create new bet"
      }
    },
    "/bets/{id}": {
      "summary": "Bets",
      "description": "Resources to manage a bets",
      "get": {
        "tags": ["Bets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bets.Bet.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Bet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get bet by Id",
        "description": "Get info from bet"
      },
      "put": {
        "tags": ["Bets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bets.Bet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bets.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Bet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update bet",
        "description": "update a bet"
      },
      "delete": {
        "tags": ["Bets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bets.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Bet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete bet",
        "description": "delete a bet"
      }
    },
    "/events": {
      "summary": "Events",
      "description": "Resources to manage a event",
      "get": {
        "tags": ["Events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get events",
        "description": "Get all list from events"
      },
      "post": {
        "tags": ["Events"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a event",
        "description": "create new event"
      }
    },
    "/events/{id}": {
      "summary": "Events",
      "description": "Resources to manage a events",
      "get": {
        "tags": ["Events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Event.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Event id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get event by Id",
        "description": "Get info from event"
      },
      "put": {
        "tags": ["Events"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Event id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update event",
        "description": "update a event"
      },
      "delete": {
        "tags": ["Events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Event id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete event",
        "description": "delete a event"
      }
    },
    "/events/status/{id}": {
      "summary": "Events",
      "description": "Resources to manage a events",
      "put": {
        "tags": ["Events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.Finished.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Event id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to finished event",
        "description": "finished a event"
      }
    },
    "/user/bets": {
      "summary": "UserBets",
      "description": "Resources to manage a user bets",
      "get": {
        "tags": ["UserBets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to get user bets",
        "description": "Get all list from user bets"
      },
      "post": {
        "tags": ["UserBets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBets.UserBet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.Create.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "summary": "endpoint to create a user bet",
        "description": "create new user bet"
      }
    },
    "/user/bets/{id}": {
      "summary": "UserBets",
      "description": "Resources to manage a user bets",
      "get": {
        "tags": ["UserBets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.UserBet.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "UserBet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get user bet by Id",
        "description": "Get info from user bet"
      },
      "put": {
        "tags": ["UserBets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBets.UserBet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.Update.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "UserBet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to update user bet",
        "description": "update a user bet"
      },
      "delete": {
        "tags": ["UserBets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.Delete.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "UserBet id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to delete user bet",
        "description": "delete a user bet"
      }
    },
    "/user/bets/filter/{id}": {
      "summary": "UserBets",
      "description": "Resources to manage a user bets",
      "get": {
        "tags": ["UserBets"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBets.UserBets.Filter.Response"
                }
              }
            },
            "description": "200 response"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.Error"
                }
              }
            },
            "description": "500 response"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "summary": "endpoint to get bet by user Id",
        "description": "Get info from bet by user Id"
      }
    }
  },
  "components": {
    "schemas": {
      "Auth.Credentials": {
        "title": "Auth.Credentials",
        "description": "Body to auth a user",
        "required": ["name"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "dani.millan07@gmail.com",
          "password": "Colombia2022*"
        },
        "additionalProperties": false
      },
      "Auth.Response": {
        "title": "Auth.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "email": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "role": {
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6MSwiZmlyc3RfbmFtZSI6IkRhbmllbCIsImxhc3RfbmFtZSI6Ik1pbGxhbiIsInBob25lIjoiMzAyMzcyNDU2MCIsImVtYWlsIjoiZGFuaS5taWxsYW4wN0BnbWFpbC5jb20iLCJ1c2VybmFtZSI6ImRhbmkubWlsbGFuMDciLCJhZGRyZXNzIjoiQ29sb21iaWEiLCJnZW5kZXIiOiJNYXNjdWxpbm8iLCJiaXJ0aF9kYXRlIjoiMTk5OC8xMC8yMyIsImNpdHkiOjEsImNhdGVnb3J5IjoiMSIsImRvY3VtZW50X2lkIjoiMTAxNTQ3Nzc4NyIsInVzZXJfc3RhdGUiOiJhY3RpdmVkIiwiaWF0IjoxNjU1MzIyOTQyLCJleHAiOjE2NTUzMjQ3NDJ9.3twzKMiKHltPlDjF4bShNNKJbJTyt06k3TmocS_ASD0",
            "id": 1,
            "email": "dani.millan07@gmail.com",
            "username": "dani.millan07",
            "role": 1
          }
        }
      },
      "Users.User": {
        "title": "Users.User",
        "description": "Body to create a user",
        "required": [
          "role",
          "first_name",
          "last_name",
          "phone",
          "email",
          "username",
          "address",
          "gender",
          "birth_date",
          "city",
          "category",
          "document_id",
          "user_state"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "birth_date": {
            "type": "string"
          },
          "city": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "document_id": {
            "type": "string"
          },
          "user_state": {
            "type": "string"
          }
        },
        "example": {
          "role": 1,
          "first_name": "Daniel",
          "last_name": "Millan",
          "phone": "3023724560",
          "email": "dani.millan09@gmail.com",
          "username": "dani.millan09",
          "address": "Colombia",
          "gender": "Masculino",
          "birth_date": "1998/10/23",
          "city": 1,
          "category": "1",
          "document_id": "1015477789",
          "user_state": "actived"
        },
        "additionalProperties": false
      },
      "Users.Response": {
        "title": "Users.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "role": 1,
                "first_name": "Daniel",
                "last_name": "Millan",
                "phone": "3023724560",
                "email": "dani.millan07@gmail.com",
                "username": "dani.millan07",
                "address": "Colombia",
                "gender": "Masculino",
                "birth_date": "1998/10/23",
                "city": 1,
                "category": "1",
                "document_id": "1015477787",
                "user_state": "actived",
                "created_at": "2022-06-11T03:59:51.000Z",
                "updated_at": "2022-06-11T03:59:51.000Z",
                "deleted": 0,
                "deleted_at": null
              }
            ],
            "total": 1
          }
        }
      },
      "Users.User.Response": {
        "title": "Users.User.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "role": {
                "type": "integer"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "gender": {
                "type": "string"
              },
              "birth_date": {
                "type": "string"
              },
              "city": {
                "type": "integer"
              },
              "category": {
                "type": "string"
              },
              "document_id": {
                "type": "string"
              },
              "user_state": {
                "type": "string"
              },
              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "role": 1,
            "first_name": "Daniel",
            "last_name": "Millan",
            "phone": "3023724560",
            "email": "dani.millan07@gmail.com",
            "username": "dani.millan07",
            "address": "Colombia",
            "gender": "Masculino",
            "birth_date": "1998/10/23",
            "city": 1,
            "category": "1",
            "document_id": "1015477787",
            "user_state": "actived",
            "created_at": "2022-06-11T03:59:51.000Z",
            "updated_at": "2022-06-11T03:59:51.000Z",
            "deleted": 0,
            "deleted_at": null
          }
        }
      },
      "Users.Create.Response": {
        "title": "Users.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user created."
        }
      },
      "Users.Update.Response": {
        "title": "Users.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user updated."
        }
      },
      "Users.Delete.Response": {
        "title": "Users.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user deleted."
        }
      },
      "Countries.Country": {
        "title": "Countries.Country",
        "description": "Body to create a country",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "example": {
          "name": "United States"
        },
        "additionalProperties": false
      },
      "Countries.Response": {
        "title": "Countries.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "United States",
                "country_status": 1
              },
              {
                "id": 2,
                "name": "Brazil",
                "country_status": 1
              }
            ],
            "total": 2
          }
        }
      },
      "Countries.Country.Response": {
        "title": "Countries.Country.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "country id",
                "type": "integer"
              },
              "name": {
                "description": "country name",
                "type": "string"
              },
              "country_status": {
                "format": "int32",
                "description": "country status",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "name": "United States",
            "country_status": 1
          }
        }
      },
      "Countries.Create.Response": {
        "title": "Countries.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "country created."
        }
      },
      "Countries.Update.Response": {
        "title": "Countries.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "country updated."
        }
      },
      "Countries.Delete.Response": {
        "title": "Countries.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "country deleted."
        }
      },
      "Cities.City": {
        "title": "Cities.City",
        "description": "Body to create a City",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "country_id": {
            "format": "int32",
            "description": "country id",
            "type": "integer"
          }
        },
        "example": {
          "name": "Texas",
          "country_id": 1
        },
        "additionalProperties": false
      },
      "Cities.Response": {
        "title": "Cities.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "Texas",
                "country_id": 1,
                "country": "United States",
                "city_status": 1
              }
            ],
            "total": 1
          }
        }
      },
      "Cities.City.Response": {
        "title": "Cities.City.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "city id",
                "type": "integer"
              },
              "name": {
                "description": "city name",
                "type": "string"
              },
              "country_id": {
                "format": "int32",
                "description": "country id",
                "type": "integer"
              },
              "country": {
                "description": "country name",
                "type": "string"
              },
              "city_status": {
                "format": "int32",
                "description": "city status",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "name": "Texas",
            "country_id": 1,
            "country": "United States",
            "city_status": 1
          }
        }
      },
      "Cities.Create.Response": {
        "title": "Cities.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "city created."
        }
      },
      "Cities.Update.Response": {
        "title": "Cities.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "city updated."
        }
      },
      "Cities.Delete.Response": {
        "title": "Cities.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "city deleted."
        }
      },
      "Modules.Module": {
        "title": "Modules.Module",
        "description": "Body to create a module",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "example": {
          "name": "admin",
          "description": "module to manage admins"
        },
        "additionalProperties": false
      },
      "Modules.Response": {
        "title": "Modules.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "users",
                "description": "module to manage users",
                "status": 1
              }
            ],
            "total": 1
          }
        }
      },
      "Modules.Module.Response": {
        "title": "Modules.Module.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "module id",
                "type": "integer"
              },
              "name": {
                "description": "module name",
                "type": "string"
              },
              "description": {
                "description": "module description",
                "type": "string"
              },
              "status": {
                "format": "int32",
                "description": "module status",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "name": "users",
            "description": "module to manage users",
            "status": 1
          }
        }
      },
      "Modules.Create.Response": {
        "title": "Modules.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "module created."
        }
      },
      "Modules.Update.Response": {
        "title": "Modules.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "module updated."
        }
      },
      "Modules.Delete.Response": {
        "title": "Modules.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "module deleted."
        }
      },
      "Roles.Role": {
        "title": "Roles.Role",
        "description": "Body to create a role",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "example": {
          "name": "user",
          "description": "role from users"
        },
        "additionalProperties": false
      },
      "Roles.Response": {
        "title": "Roles.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "admin",
                "description": "admin role",
                "status": 1
              }
            ],
            "total": 1
          }
        }
      },
      "Roles.Role.Response": {
        "title": "Roles.Role.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "role id",
                "type": "integer"
              },
              "name": {
                "description": "role name",
                "type": "string"
              },
              "description": {
                "description": "role description",
                "type": "string"
              },
              "status": {
                "format": "int32",
                "description": "role status",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "name": "admin",
            "description": "admin role",
            "status": 1
          }
        }
      },
      "Roles.Create.Response": {
        "title": "Roles.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "role created."
        }
      },
      "Roles.Update.Response": {
        "title": "Roles.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "role updated."
        }
      },
      "Roles.Delete.Response": {
        "title": "Roles.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "role deleted."
        }
      },
      "RolePermissions.RolePermission": {
        "title": "RolePermissions.RolePermission",
        "description": "Body to create a permission from role",
        "required": ["role_id", "module_id", "role_action"],
        "type": "object",
        "properties": {
          "role_id": {
            "type": "integer"
          },
          "module_id": {
            "type": "integer"
          },
          "role_action": {
            "type": "integer",
            "enum": [1, 2, 3, 4]
          }
        },
        "example": {
          "role_id": 1,
          "module_id": 2,
          "role_action": 4
        },
        "additionalProperties": false
      },
      "RolePermissions.Response": {
        "title": "RolePermissions.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "role_id": 1,
                "role": "admin",
                "module_id": 2,
                "module": "admin",
                "role_action": 2,
                "action": "create"
              }
            ],
            "total": 1
          }
        }
      },
      "RolePermission.PermissionsRole.Response": {
        "title": "RolePermission.PermissionsRole.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "role permission id",
                "type": "integer"
              },
              "role_id": {
                "format": "int32",
                "description": "role id",
                "type": "integer"
              },
              "role": {
                "description": "role name",
                "type": "string"
              },
              "module_id": {
                "format": "int32",
                "description": "module id",
                "type": "integer"
              },
              "module": {
                "description": "module name",
                "type": "string"
              },
              "role_action": {
                "format": "int32",
                "description": "role action id",
                "type": "integer"
              },
              "action": {
                "description": "action name",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "role_id": 1,
                "role": "admin",
                "module_id": 2,
                "module": "admin",
                "role_action": 2,
                "action": "create"
              }
            ],
            "total": 1
          }
        }
      },
      "RolePermissions.Create.Response": {
        "title": "RolePermissions.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "permission to role created."
        }
      },
      "RolePermissions.Delete.Response": {
        "title": "RolePermissions.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "permission from role deleted."
        }
      },
      "Sports.Sport": {
        "title": "Sports.Sport",
        "description": "Body to create a sport",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "allowDraw": {
            "type": "integer"
          },
          "status": {
            "type": "integer"
          }
        },
        "example": {
          "name": "soccer",
          "description": "soccer sport"
        },
        "additionalProperties": false
      },
      "Sports.Response": {
        "title": "Sports.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "soccer",
                "description": "soccer sport",
                "allowDraw": 1,
                "status": 1
              }
            ],
            "total": 1
          }
        }
      },
      "Sports.Sport.Response": {
        "title": "Sports.Sport.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "sport id",
                "type": "integer"
              },
              "name": {
                "description": "sport name",
                "type": "string"
              },
              "description": {
                "description": "sport description",
                "type": "string"
              },
              "allowDraw": {
                "format": "int32",
                "description": "sport status",
                "type": "integer"
              },
              "status": {
                "format": "int32",
                "description": "sport status",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "name": "soccer",
            "description": "soccer sport",
            "allowDraw": 1,
            "status": 1
          }
        }
      },
      "Sports.Create.Response": {
        "title": "Sports.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "sport created."
        }
      },
      "Sports.Update.Response": {
        "title": "Sports.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "sport updated."
        }
      },
      "Sports.Delete.Response": {
        "title": "Sports.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "sport deleted."
        }
      },
      "Transactions.Transaction": {
        "title": "Transactions.Transaction",
        "description": "Body to create a transaction",
        "required": ["user_id", "amount", "category_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "amount": {
            "type": "integer"
          },
          "category_id": {
            "type": "string",
            "enum": ["DEPOSIT", "WITHDRAW", "BET", "WINNING"]
          },
          "user_bet_id": {
            "type": "integer"
          }
        },
        "example": {
          "user_id": 6,
          "amount": 200,
          "category": 1,
          "user_bet_id": 0
        },
        "additionalProperties": false
      },
      "Transactions.Response": {
        "title": "Transactions.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "user_id": 1,
                "username": "dani.millan07",
                "first_name": "Daniel",
                "last_name": "Millan",
                "amount": 10,
                "category_id": 1,
                "category": "DEPOSIT",
                "status": 1,
                "created_at": "2022-06-14T19:09:52.000Z",
                "updated_at": "2022-06-14T19:09:52.000Z",
                "deleted": 0,
                "deleted_at": null,
                "user_bet_id": null
              }
            ],
            "total": 1
          }
        }
      },
      "Transactions.User.Response": {
        "title": "Transactions.User.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "user_id": 1,
                "amount": 10,
                "category_id": 1,
                "category": "DEPOSIT",
                "status": 1,
                "created_at": "2022-06-14T19:09:52.000Z",
                "updated_at": "2022-06-14T19:09:52.000Z",
                "deleted": 0,
                "deleted_at": null,
                "user_bet_id": null
              }
            ],
            "total": 1
          }
        }
      },
      "Transactions.Transaction.Response": {
        "title": "Transactions.Transaction.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "transaction id",
                "type": "integer"
              },
              "user_id": {
                "format": "int32",
                "description": "user id",
                "type": "integer"
              },
              "amount": {
                "format": "int32",
                "description": "amount",
                "type": "integer"
              },
              "category_id": {
                "format": "int32",
                "description": "category id",
                "type": "integer"
              },
              "category": {
                "description": "category name",
                "type": "string"
              },
              "status": {
                "format": "int32",
                "description": "transaction status",
                "type": "integer"
              },
              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              },
              "user_bet_id": {
                "description": "user bet id",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "user_id": 1,
            "amount": 10,
            "category_id": 1,
            "category": "DEPOSIT",
            "status": 1,
            "created_at": "2022-06-14T19:09:52.000Z",
            "updated_at": "2022-06-14T19:09:52.000Z",
            "deleted": 0,
            "deleted_at": null,
            "user_bet_id": null
          }
        }
      },
      "Transactions.Create.Response": {
        "title": "Transactions.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "transaction created."
        }
      },
      "Transactions.Update.Response": {
        "title": "Transactions.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "transaction updated."
        }
      },
      "Transactions.Delete.Response": {
        "title": "Transactions.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "transaction deleted."
        }
      },
      "Bets.Bet": {
        "title": "Bets.Bet",
        "description": "Body to create a bet",
        "required": [
          "bet_option",
          "status_id",
          "sport",
          "name",
          "event_id",
          "odd"
        ],
        "type": "object",
        "properties": {
          "bet_option": {
            "type": "integer"
          },
          "status_id": {
            "type": "string",
            "enum": ["ACTIVE", "CANCELLED", "SETTLED"]
          },
          "sport": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "event_id": {
            "type": "integer"
          },
          "odd": {
            "type": "integer"
          },
          "result_id": {
            "type": "string",
            "enum": ["WON", "LOST", "OPEN"]
          }
        },
        "example": {
          "bet_option": 1,
          "status_id": "ACTIVE",
          "sport": 1,
          "name": "Borussia Dortmund",
          "event_id": "1",
          "odd": 1
        },
        "additionalProperties": false
      },
      "Bets.Response": {
        "title": "Bets.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "bet_option": "bet",
                "sport_id": 1,
                "sport": "Soccer",
                "status_id": "1",
                "status": "ACTIVE",
                "name": "bet 1",
                "event_id": "1",
                "event": "Borussia VS Barcelona",
                "odd": "1",
                "result": null,
                "created_at": "2022-06-15T15:55:20.000Z",
                "updated_at": "2022-06-15T15:55:20.000Z",
                "deleted": 0,
                "deleted_at": null
              }
            ],
            "total": 1
          }
        }
      },
      "Bets.Bet.Response": {
        "title": "Bets.Bet.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "bet id",
                "type": "integer"
              },
              "bet_option": {
                "description": "bet option",
                "type": "string"
              },
              "sport_id": {
                "format": "int32",
                "description": "sport id",
                "type": "integer"
              },
              "sport": {
                "description": "sport",
                "type": "string"
              },
              "status_id": {
                "format": "int32",
                "description": "bet status id",
                "type": "integer"
              },
              "status": {
                "description": "bet status",
                "type": "string"
              },
              "name": {
                "description": "bet name",
                "type": "string"
              },
              "event_id": {
                "format": "int32",
                "description": "bet event id",
                "type": "integer"
              },
              "event": {
                "description": "bet event",
                "type": "string"
              },
              "odd": {
                "format": "int32",
                "description": "bet odd",
                "type": "integer"
              },
              "result_id": {
                "format": "int32",
                "description": "bet result id",
                "type": "integer"
              },
              "result": {
                "description": "bet result",
                "type": "string"
              },
              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,
            "bet_option": "Borussia",
            "sport_id": 1,
            "sport": "Soccer",
            "status_id": "1",
            "status": "ACTIVE",
            "name": "bet 1",
            "event_id": "1",
            "event": "Borussia VS Barcelona",
            "odd": 1,
            "result": null,
            "created_at": "2022-06-15T15:55:20.000Z",
            "updated_at": "2022-06-15T15:55:20.000Z",
            "deleted": 0,
            "deleted_at": null
          }
        }
      },
      "Bets.Create.Response": {
        "title": "Bets.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "bet created."
        }
      },
      "Bets.Update.Response": {
        "title": "Bets.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "bet updated."
        }
      },
      "Bets.Delete.Response": {
        "title": "Bets.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "bet deleted."
        }
      },
      "Events.Event": {
        "title": "Events.Event",
        "description": "Body to create a event",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "FINISHED"]
          }
        },
        "example": {
          "name": "Borussia Dortmund VS Barcelona"
        },
        "additionalProperties": false
      },
      "Events.Response": {
        "title": "Events.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 1,
                "name": "Borussia Dortmund VS Barcelona",
                "status": "ACTIVE"
              }
            ],
            "total": 1
          }
        }
      },
      "Events.Event.Response": {
        "title": "Events.Event.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "event id",
                "type": "integer"
              },

              "name": {
                "description": "event name",
                "type": "string"
              },
              "status": {
                "description": "event status",
                "type": "string"
              },

              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 1,

            "name": "Borussia Dortmund VS Barcelona",
            "status": "ACTIVE",
            "created_at": "2022-06-15T15:55:20.000Z",
            "updated_at": "2022-06-15T15:55:20.000Z",
            "deleted": 0,
            "deleted_at": null
          }
        }
      },
      "Events.Create.Response": {
        "title": "Events.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "event created."
        }
      },
      "Events.Finished.Response": {
        "title": "Events.Finished.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "event finished."
        }
      },
      "Events.Update.Response": {
        "title": "Events.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "event updated."
        }
      },
      "Events.Delete.Response": {
        "title": "Events.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "event deleted."
        }
      },
      "UserBets.UserBet": {
        "title": "UserBets.UserBet",
        "description": "Body to create a user bet",
        "required": ["user_id", "bet_id", "state_id", "odd", "amount"],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "bet_id": {
            "type": "integer"
          },
          "state_id": {
            "type": "string",
            "enum": ["OPEN", "WON", "LOST"]
          },
          "odd": {
            "type": "integer"
          },
          "amount": {
            "type": "integer"
          }
        },
        "example": {
          "user_id": 1,
          "bet_id": 2,
          "state_id": "OPEN",
          "odd": 1,
          "amount": 10
        },
        "additionalProperties": false
      },
      "UserBets.Response": {
        "title": "UserBets.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "rows": {
                "description": "data rows",
                "type": "array"
              },
              "total": {
                "format": "int32",
                "description": "count total rows",
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "rows": [
              {
                "id": 3,
                "user_id": 1,
                "first_name": "Daniel",
                "username": "dani.millan07",
                "bet_id": 2,
                "bet": "Borussia Dortmund",
                "odd": 1,
                "amount": 10,
                "state": 3,
                "created_at": "2022-06-15T17:28:25.000Z",
                "updated_at": "2022-06-15T17:28:25.000Z",
                "deleted": 0,
                "deleted_at": null
              }
            ],
            "total": 1
          }
        }
      },
      "UserBets.UserBet.Response": {
        "title": "UserBets.UserBet.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "bet id",
                "type": "integer"
              },
              "user_id": {
                "description": "bet user",
                "type": "string"
              },
              "first_name": {
                "description": "first name",
                "type": "string"
              },
              "username": {
                "description": "username",
                "type": "string"
              },
              "bet_id": {
                "format": "int32",
                "description": "bet id",
                "type": "integer"
              },
              "bet": {
                "description": "bet",
                "type": "string"
              },
              "odd": {
                "format": "int32",
                "description": "bet odd",
                "type": "integer"
              },
              "amount": {
                "format": "int32",
                "description": "bet amount",
                "type": "integer"
              },
              "state": {
                "description": "bet state",
                "type": "string"
              },
              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 3,
            "user_id": 1,
            "first_name": "Daniel",
            "username": "dani.millan07",
            "bet_id": 2,
            "bet": "Borussia Dortmund",
            "odd": 1,
            "amount": 10,
            "state": 3,
            "created_at": "2022-06-15T17:28:25.000Z",
            "updated_at": "2022-06-15T17:28:25.000Z",
            "deleted": 0,
            "deleted_at": null
          }
        }
      },
      "UserBets.UserBets.Filter.Response": {
        "title": "UserBets.UserBets.Filter.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "object",
            "properties": {
              "id": {
                "format": "int32",
                "description": "bet id",
                "type": "integer"
              },
              "user_id": {
                "description": "bet user",
                "type": "string"
              },
              "first_name": {
                "description": "first name",
                "type": "string"
              },
              "username": {
                "description": "username",
                "type": "string"
              },
              "bet_id": {
                "format": "int32",
                "description": "bet id",
                "type": "integer"
              },
              "bet": {
                "description": "bet",
                "type": "string"
              },
              "odd": {
                "format": "int32",
                "description": "bet odd",
                "type": "integer"
              },
              "amount": {
                "format": "int32",
                "description": "bet amount",
                "type": "integer"
              },
              "state": {
                "description": "bet state",
                "type": "string"
              },
              "created_at": {
                "description": "created at",
                "type": "string"
              },
              "updated_at": {
                "description": "updated at",
                "type": "string"
              },
              "deleted": {
                "description": "is deleted",
                "type": "integer"
              },
              "deleted_at": {
                "description": "deleted at",
                "type": "string"
              }
            }
          }
        },
        "example": {
          "status": 200,
          "data": {
            "id": 3,
            "user_id": 1,
            "first_name": "Daniel",
            "username": "dani.millan07",
            "bet_id": 2,
            "bet": "Borussia Dortmund",
            "odd": 1,
            "amount": 10,
            "state": 3,
            "created_at": "2022-06-15T17:28:25.000Z",
            "updated_at": "2022-06-15T17:28:25.000Z",
            "deleted": 0,
            "deleted_at": null
          }
        }
      },
      "UserBets.Create.Response": {
        "title": "UserBets.Create.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user bet created."
        }
      },
      "UserBets.Update.Response": {
        "title": "UserBets.Update.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user bet updated."
        }
      },
      "UserBets.Delete.Response": {
        "title": "UserBets.Delete.Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "user bet deleted."
        }
      },
      "Response": {
        "title": "Response",
        "description": "",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "status from response",
            "type": "integer"
          },
          "data": {
            "description": "data from response",
            "type": "string"
          }
        },
        "example": {
          "status": 200,
          "data": "Test passed"
        }
      },
      "Response.Error": {
        "title": "Response.Error",
        "description": "Error response from API",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "status": 500,
          "message": "Error"
        }
      }
    },
    "responses": {
      "simpleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Response"
            }
          }
        },
        "description": "a simple response"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
